package com.mini.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;

import com.mini.util.ConnectionUtil;
import com.mini.vo.MemberVO;

import com.mini.vo.BoardVO;

public class BoardDAO {
	public ArrayList<BoardVO> getBoardListForPaging(int begin, int end, int member_no) throws Exception {
		ArrayList<BoardVO> boards = new ArrayList<>();
		String sql = " SELECT BOARD_NO, BOARD_FILE, BOARD_TAG, "
				+ " BOARD_CONTENT, BOARD_LIKE_CNT, BOARD_LEVEL, "
				+ " BOARD_REGDATE, MEMBER_NO "
				+ "	FROM ( "
				+ "			SELECT ROW_NUMBER() OVER (ORDER BY BOARD_NO DESC) RN, BOARD_NO, BOARD_FILE, BOARD_TAG, BOARD_CONTENT, BOARD_LIKE_CNT, BOARD_LEVEL, BOARD_REGDATE, MEMBER_NO "
				+ "			FROM TB_BOARD "
				+ "			WHERE MEMBER_NO = ?) "
				+ " WHERE RN>= ? AND RN <= ? ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, member_no);
		pstmt.setInt(2, begin);
		pstmt.setInt(3, end);
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			BoardVO board = new BoardVO();
			board.setBoard_no(rs.getInt("BOARD_NO"));
			board.setBoard_file(rs.getString("BOARD_FILE"));
			board.setBoard_tag(rs.getString("BOARD_TAG"));
			board.setBoard_content(rs.getString("BOARD_CONTENT"));
			board.setBoard_like_cnt(rs.getInt("BOARD_LIKE_CNT"));
			board.setBoard_level(rs.getInt("BOARD_LEVEL"));
			board.setBoard_regdate(rs.getDate("BOARD_REGDATE"));
			board.setMember_no(rs.getInt("MEMBER_NO"));
			boards.add(board);	
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return boards;
	}
	public int getAllBoardRows(int no) throws Exception {
		int totalRows = 0;
		String sql = "SELECT COUNT(*) CNT "
				+ " FROM TB_BOARD A, TB_MEMBER B "
				+ " WHERE A.MEMBER_NO = B.MEMBER_NO "
				+ " AND A.BOARD_LEVEL = 0 "
				+ " AND ( A.MEMBER_NO IN ( (SELECT FRIEND_NO "
				+ "							FROM TB_FRIEND "
				+ "							WHERE MEMBER_NO = ? "
				+ "							AND FRIEND_AGREE = 'Y')) "
				+ " OR A.MEMBER_NO = ?) "
				+ " ORDER BY A.BOARD_NO DESC ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, no);
		pstmt.setInt(2, no);
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			totalRows = rs.getInt("CNT");
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return totalRows;
	}
	
	public int getMeBoardRows(int no) throws Exception {
		int totalRows = 0;
		String sql = "SELECT COUNT(*) CNT "
				+ " FROM TB_BOARD A, TB_MEMBER B "
				+ " WHERE A.MEMBER_NO = B.MEMBER_NO "
				+ " AND A.BOARD_LEVEL = 0 "
				+ " AND A.MEMBER_NO = ? "
				+ " ORDER BY A.BOARD_NO DESC ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, no);
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			totalRows = rs.getInt("CNT");
		}
		rs.close();
		pstmt.close();
		con.close();
		
		return totalRows;
	}
	
	public void updateNewBoard(BoardVO board) throws Exception {
		String sql = " INSERT INTO TB_BOARD "
				+ " (BOARD_NO, BOARD_FILE, BOARD_TAG, BOARD_CONTENT, "
				+ " MEMBER_NO) "
				+ " VALUES(SEQ_BOARD_NO.NEXTVAL, ?, ?, ?, ?) ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setString(1, board.getBoard_file());
		pstmt.setString(2, board.getBoard_tag());
		pstmt.setString(3, board.getBoard_content());
		pstmt.setInt(4, board.getMember_no());	
		pstmt.executeUpdate();		
		
		pstmt.close();
		con.close();
	}
	
	public ArrayList<BoardVO> findBoardsOnMe(MemberVO member) throws Exception {
		ArrayList<BoardVO> boards = new ArrayList<>();
		String sql = " SELECT BOARD_NO, BOARD_FILE, "
				+ " BOARD_TAG, BOARD_CONTENT, "
				+ " BOARD_LIKE_CNT, BOARD_LEVEL, "
				+ " BOARD_REGDATE, MEMBER_NO "
				+ " FROM TB_BOARD "
				+ " WHERE MEMBER_NO = ? "
				+ " AND BOARD_LEVEL = 0 "
				+ " ORDER BY BOARD_NO DESC ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, member.getMemberNo());
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			BoardVO board = new BoardVO();
			board.setBoard_no(rs.getInt("BOARD_NO"));
			board.setBoard_file(rs.getString("BOARD_FILE"));
			board.setBoard_tag(rs.getString("BOARD_TAG"));
			board.setBoard_content(rs.getString("BOARD_CONTENT"));
			board.setBoard_like_cnt(rs.getInt("BOARD_LIKE_CNT"));
			board.setBoard_level(rs.getInt("BOARD_LEVEL"));
			board.setBoard_regdate(rs.getDate("BOARD_REGDATE"));
			board.setMember_no(rs.getInt("MEMBER_NO"));
			boards.add(board);
		}
		rs.close();
		pstmt.close();
		con.close();
		return boards;
	}
	
	public ArrayList<BoardVO> findMySubscribedBoards(MemberVO member) throws Exception {
		ArrayList<BoardVO> boards = new ArrayList<>();
		
		return boards;
	}
	
	public ArrayList<BoardVO> findAllBoards(MemberVO member) throws Exception {
		ArrayList<BoardVO> boards = new ArrayList<>();
		String sql = " SELECT A.BOARD_NO BOARD_NO, A.BOARD_FILE BOARD_FILE, A.BOARD_TAG BOARD_TAG, A.BOARD_CONTENT BOARD_CONTENT, A.BOARD_LIKE_CNT BOARD_LIKE_CNT, A.BOARD_LEVEL BOARD_LEVEL, A.BOARD_REGDATE BOARD_REGDATE, A.MEMBER_NO MEMBER_NO, B.MEMBER_NAME MEMBER_NAME "
				+ "FROM TB_BOARD A, TB_MEMBER B, (SELECT COUNT(*) FROM TB_LIKE A, TB_BOARD B WHERE A.BOARD_NO = B.BOARD_NO )"
				+ " WHERE A.MEMBER_NO = B.MEMBER_NO "
				+ " AND A.BOARD_LEVEL = 0 "
				+ " AND (A.MEMBER_NO IN ((SELECT FRIEND_NO FROM TB_FRIEND WHERE MEMBER_NO= ? AND FRIEND_AGREE = 'Y')) "
				+ " OR A.MEMBER_NO = ?) "
				+ " ORDER BY A.BOARD_NO DESC ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, member.getMemberNo());
		pstmt.setInt(2, member.getMemberNo());
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			BoardVO board = new BoardVO();
			board.setBoard_no(rs.getInt("BOARD_NO"));
			board.setBoard_file(rs.getString("BOARD_FILE"));
			board.setBoard_tag(rs.getString("BOARD_TAG"));
			board.setBoard_content(rs.getString("BOARD_CONTENT"));
			board.setBoard_like_cnt(rs.getInt("BOARD_LIKE_CNT"));
			board.setBoard_level(rs.getInt("BOARD_LEVEL"));
			board.setBoard_regdate(rs.getDate("BOARD_REGDATE"));
			board.setMember_no(rs.getInt("MEMBER_NO"));
			board.setMember_name(rs.getString("MEMBER_NAME"));
			boards.add(board);
		}
		rs.close();
		pstmt.close();
		con.close();
		return boards;
	}
	
	public void deleteBoardByNo(BoardVO board) {
		
	}
	
	public void callBoardforEdit(BoardVO board) {
		
	}
	
	public void updateEditedBoard(BoardVO board) {
		
	}
	
	public boolean isAlreadyLike(int boardNo, int memberNo) throws Exception {
		boolean checking = false;
		String sql = " SELECT * FROM TB_LIKE WHERE MEMBER_NO = ? AND BOARD_NO = ? ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, memberNo);
		pstmt.setInt(2, boardNo);
		ResultSet rs = pstmt.executeQuery();
		
		if (rs.next()) {
			checking = true;
		}
		return checking;
	}
	
	
	public void likeBoard(int boardNo, int memberNo) throws Exception {
		String sql = " INSERT INTO TB_LIKE "
				+ " (BOARD_NO, MEMBER_NO) "
				+ " VALUES(?, ?) ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, boardNo);
		pstmt.setInt(2, memberNo);	
		pstmt.executeUpdate();		
		
		String sql2 = " UPDATE TB_BOARD SET BOARD_LIKE_CNT = BOARD_LIKE_CNT + 1 WHERE BOARD_NO = ? ";
		PreparedStatement pstmt2 = con.prepareStatement(sql2);
		pstmt2.setInt(1, boardNo);
		pstmt2.executeUpdate();
		
		pstmt2.close();		
		pstmt.close();
		con.close();
	}
	
	public boolean checkSubsYesNo(int boardNo, int memberNo) {
		boolean checking = false;
		return checking;
		
	}

	public void addBoardToSubscribe(int boardNo, int memberNo) {
		
	}	
	
	public void removeBoardFromSubscribe(BoardVO board, MemberVO member) {
		
	}
	
	public void addNewComments(BoardVO board) throws Exception {
		String sql = " INSERT INTO TB_BOARD "
				+ " (BOARD_NO, BOARD_TAG, BOARD_CONTENT, "
				+ " MEMBER_NO, BOARD_LEVEL) "
				+ " VALUES(SEQ_BOARD_NO.NEXTVAL,  ?, ?, ?, ?) ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setString(1, board.getBoard_tag());
		pstmt.setString(2, board.getBoard_content());
		pstmt.setInt(3, board.getMember_no());	
		pstmt.setInt(4, board.getBoard_level());
		pstmt.executeUpdate();		
		
		pstmt.close();
		con.close();
	}
	
	public ArrayList<BoardVO> findCommentsByBoardNo(int no) throws Exception {
		ArrayList<BoardVO> boards = new ArrayList<>();
		String sql = " SELECT A.BOARD_NO BOARD_NO, A.BOARD_FILE BOARD_FILE, A.BOARD_TAG BOARD_TAG, B.MEMBER_PHOTO MEMBER_PHOTO, "
				+ " A.BOARD_CONTENT BOARD_CONTENT, A.BOARD_LIKE_CNT BOARD_LIKE_CNT, A.BOARD_LEVEL BOARD_LEVEL, "
				+ " A.BOARD_REGDATE BOARD_REGDATE, A.MEMBER_NO MEMBER_NO, B.MEMBER_NAME MEMBER_NAME "
				+ " FROM TB_BOARD A, TB_MEMBER B "
				+ " WHERE A.BOARD_LEVEL = ? "
				+ " AND A.MEMBER_NO = B.MEMBER_NO "
				+ " ORDER BY BOARD_NO ASC ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		pstmt.setInt(1, no);
		ResultSet rs = pstmt.executeQuery();
		while(rs.next()) {
			BoardVO board = new BoardVO();
			board.setBoard_no(rs.getInt("BOARD_NO"));
			board.setBoard_content(rs.getString("BOARD_CONTENT"));
			board.setBoard_like_cnt(rs.getInt("BOARD_LIKE_CNT"));
			board.setBoard_level(rs.getInt("BOARD_LEVEL"));
			board.setBoard_regdate(rs.getDate("BOARD_REGDATE"));
			board.setMember_no(rs.getInt("MEMBER_NO"));
			board.setMember_name(rs.getString("MEMBER_NAME"));
			board.setMember_photo(rs.getString("MEMBER_PHOTO"));
			boards.add(board);
		}
		rs.close();
		pstmt.close();
		con.close();
		return boards;
	}
	
	public int findCommentNo (BoardVO board) throws Exception {
		int result = 0;
		String sql = " SELECT A.BOARD_NO BOARD_NO, A.BOARD_FILE BOARD_FILE, A.BOARD_TAG BOARD_TAG, B.MEMBER_PHOTO MEMBER_PHOTO, "
				+ " A.BOARD_CONTENT BOARD_CONTENT, A.BOARD_LIKE_CNT BOARD_LIKE_CNT, A.BOARD_LEVEL BOARD_LEVEL, "
				+ " A.BOARD_REGDATE BOARD_REGDATE, A.MEMBER_NO MEMBER_NO, B.MEMBER_NAME MEMBER_NAME "
				+ " FROM TB_BOARD A, TB_MEMBER B "
				+ " WHERE A.BOARD_LEVEL = ? "
				+ " AND A.MEMBER_NO = ? "
				+ " AND A.MEMBER_NO = B.MEMBER_NO "
				+ " ORDER BY BOARD_NO DESC ";
		Connection con = ConnectionUtil.getConnection();
		PreparedStatement pstmt = con.prepareStatement(sql);
		
		pstmt.setInt(1, board.getBoard_level());
		pstmt.setInt(2, board.getMember_no());
		ResultSet rs = pstmt.executeQuery();
		rs.next();
		result = rs.getInt("BOARD_NO");
		
		rs.close();
		pstmt.close();
		con.close();
		return result;
	}

}